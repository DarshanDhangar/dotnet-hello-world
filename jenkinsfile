pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-pwd')  // Define in Jenkins
        DOCKER_IMAGE_NAME = "darshandhangar/dotnet-hello-world"
        ENVIRONMENT = "${params.ENVIRONMENT}"
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['UAT', 'PRODUCTION'], description: 'Choose deployment environment')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/DarshanDhangar/dotnet-hello-world.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with a unique tag based on the build ID
                    def image = docker.build("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', DOCKERHUB_CREDENTIALS) {
                        def image = docker.image("${DOCKER_IMAGE_NAME}:${env.BUILD_ID}")
                        image.push()
                        image.push("latest")  // Optionally tag as "latest"
                    }
                }
            }
        }

        stage('Deploy to AWS EC2') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                    script {
                        // Determine EC2 instance IP based on environment
                        def ec2InstanceIp = (params.ENVIRONMENT == 'UAT') ? 'UAT_IP' : 'PRODUCTION_IP'

                        sshagent(['aws-ec2-ssh']) {
                            // Deploy the Docker container to EC2 instance
                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@${ec2InstanceIp} '
                                docker pull ${DOCKER_IMAGE_NAME}:${env.BUILD_ID} &&
                                docker stop dotnet-hello-world || true &&
                                docker rm dotnet-hello-world || true &&
                                docker run -d --name dotnet-hello-world -p 80:80 ${DOCKER_IMAGE_NAME}:${env.BUILD_ID}'
                            """
                        }
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    // Perform health check to verify the app is running
                    def ec2InstanceIp = (params.ENVIRONMENT == 'UAT') ? 'UAT_IP' : 'PRODUCTION_IP'
                    sh "curl -f http://${ec2InstanceIp}:80 || exit 1"
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment succeeded!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
